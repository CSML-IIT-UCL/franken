name: CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
    types: [opened, reopened, synchronize]
  schedule:
    # Weekly tests run on main by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 2 * * 1"
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}, Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]
        pytorch-version: ["2.5", "2.6"]

    steps:
      - uses: actions/checkout@v4

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      # More info on options: https://github.com/marketplace/actions/setup-micromamba
      - name: Create and setup mamba
        uses: mamba-org/setup-micromamba@v2
        with:
          # here we specify the environment like this instead of just installing with pip to make caching easier
          environment-file: .github/env-dev.yml
          environment-name: test
          cache-environment: true
          cache-environment-key: environment-${{ matrix.python-version }}-${{ matrix.pytorch-version }}
          condarc: |
            channels:
              - conda-forge
          create-args: >-
            python=${{ matrix.python-version }}
            pytorch=${{ matrix.pytorch-version }}

      - name: Install GNN backbones packages
        # conda setup requires this special shell
        shell: bash -l {0}
        env:
          TORCH_VERSION: ${{ matrix.pytorch-version }}
        run: |
          python -m pip install torch_geometric
          # Running with the -f argument gives us prebuilt wheels which speeds things up.
          # On the other hand it depends on them publishing the wheels
          python -m pip install pyg_lib torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-${TORCH_VERSION}.0+cpu.html
          python -m pip install --no-deps fairchem-core==1.10  # fairchem dependencies are a nightmare, better to ignore them
          python -m pip install mace-torch

      - name: Install package
        # conda setup requires this special shell
        shell: bash -l {0}
        run: |
          python -m pip install . --no-deps
          micromamba list

      - name: Run tests
        # conda setup requires this special shell
        shell: bash -l {0}
        run: |
          pytest -v --color=yes tests/

      # - name: CodeCov
      #   if: contains( matrix.os, 'ubuntu' )
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ./coverage.xml
      #     flags: codecov
      #     name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  build:
    name: Bump version and build package with hatch
    needs: test  # This ensures 'publish' only runs if 'test' passes
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      contains(github.event.head_commit.message, '[release]')
    steps:
      - uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: install hatch
        run: pip install hatch

      - name: Determine bump type
        id: bump
        run: |
          COMMIT_MSG=`git log -1 --pretty=%B | head -n 1`
          if [[ "$COMMIT_MSG" == *"[Major]"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"[Minor]"* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi
      - name: bump version and tag repo
        run: |
          git config --global user.name 'autobump'
          git config --global user.email 'autobump@github.com'
          OLD_VERSION=`hatch version`
          hatch version ${{ steps.bump.outputs.bump }}
          NEW_VERSION=`hatch version`
          git add franken/__init__.py
          git commit -m "Updated version: ${OLD_VERSION} â†’ ${NEW_VERSION} [skip ci]"
          git tag $NEW_VERSION
          git push
          git push --tags
      - name: build franken package
        run: hatch build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/*

  publish:
    name: Publish to PyPi
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      needs.build.result == 'success'
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    environment:
      name: pypi
      url: https://pypi.org/project/franken/
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1